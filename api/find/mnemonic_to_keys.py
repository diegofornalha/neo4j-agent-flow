#!/usr/bin/env python3
"""
üîë CONVERTER MNEMONIC PARA CHAVES FLOW
"""

try:
    from mnemonic import Mnemonic
    from hashlib import sha256
    import hmac
    import hashlib
except ImportError:
    print("Instalando bibliotecas necess√°rias...")
    import subprocess
    subprocess.run(["pip3", "install", "mnemonic"], capture_output=True)
    from mnemonic import Mnemonic
    from hashlib import sha256
    import hmac
    import hashlib

# Frase fornecida
MNEMONIC_PHRASE = "effort settle trash drift mouse sausage address must spot fault put lonely"

print("üîë CONVERTENDO MNEMONIC PARA CHAVES")
print("=" * 60)
print(f"üìù Mnemonic: {MNEMONIC_PHRASE}")

# Verificar se a mnemonic √© v√°lida
mnemo = Mnemonic("english")
if not mnemo.check(MNEMONIC_PHRASE):
    print("‚ö†Ô∏è Aviso: Mnemonic pode n√£o ser v√°lida")

# Converter para seed
seed = mnemo.to_seed(MNEMONIC_PHRASE, passphrase="")
print(f"\nüå± Seed gerada: {seed.hex()[:32]}...")

# Derivar chave usando BIP32 path para Flow: m/44'/539'/0'/0/0
# Flow usa curve P-256 (secp256r1)

# Para Flow, precisamos usar a biblioteca espec√≠fica ou ferramenta CLI
# Vamos tentar usar o flow-py-sdk se dispon√≠vel

print("\nüîÑ Tentando derivar chaves para Flow...")

# M√©todo alternativo: usar o flow keys generate com --mnemonic
import subprocess
import json

# Criar arquivo tempor√°rio com a mnemonic
with open("/tmp/mnemonic.txt", "w") as f:
    f.write(MNEMONIC_PHRASE)

# Tentar gerar conta a partir da mnemonic
# Infelizmente o Flow CLI n√£o tem op√ß√£o direta para isso

print("\n‚ö†Ô∏è O Flow CLI n√£o suporta deriva√ß√£o direta de mnemonic")
print("   Mas podemos testar se a seed corresponde a alguma conta...")

# Vamos testar se essa mnemonic gera alguma das chaves privadas conhecidas
print("\nüîç Testando correspond√™ncias conhecidas:")

# Chaves privadas que temos
known_keys = {
    "Conta 1": "4c1b7d1e4128413b60283a787f750db4b6228c9f1bd063479073900b3fd9985f",
    "Conta 2": "7c5a857c81fe09a3a21be38e57212a29d1f2a51cae314ae47c5ef62e8afcaec3"
}

# A seed em hex
seed_hex = seed.hex()

for name, key in known_keys.items():
    print(f"\n   {name}:")
    print(f"   Chave: {key[:16]}...")
    # Verificar se parte da seed corresponde
    if key[:16] in seed_hex or seed_hex[:16] in key:
        print(f"   ‚úÖ Poss√≠vel correspond√™ncia!")
    else:
        print(f"   ‚ùå N√£o corresponde")

print("\nüìù NOTA IMPORTANTE:")
print("   Para recuperar a chave privada exata do Flow a partir")
print("   da mnemonic, precisamos usar a mesma deriva√ß√£o que foi")
print("   usada originalmente (BIP32/BIP44 com curve P-256)")

print("\nüí° SOLU√á√ÉO ALTERNATIVA:")
print("   1. Importe a mnemonic em uma wallet Flow compat√≠vel")
print("   2. A wallet derivar√° a chave privada correta")
print("   3. Exporte a chave privada da wallet")

print("\nüîß Wallets compat√≠veis:")
print("   - Flow Wallet Extension")
print("   - Blocto")
print("   - Lilico Wallet")

print("\n" + "=" * 60)