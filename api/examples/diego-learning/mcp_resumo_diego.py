#!/usr/bin/env python3
"""
üî¥ MCP TOOLS - RESUMO ESSENCIAL PARA DIEGO
"""

print("="*70)
print("üéØ MCP TOOLS - TUDO QUE VOC√ä PRECISA SABER")
print("="*70)

# ============================================================================
# O ESSENCIAL
# ============================================================================
print("""
üìö MCP TOOLS - CONCEITO FUNDAMENTAL

MCP Tools s√£o ferramentas customizadas que voc√™ cria para o Claude usar.
√â como criar superpoderes espec√≠ficos que o Claude n√£o tinha antes!

‚úÖ SEMPRE LEMBRE:
1. Use decorator @tool
2. Fun√ß√£o SEMPRE async
3. Retorno SEMPRE no formato espec√≠fico
4. Permitir em allowed_tools
""")

print("\n" + "="*70)
print("üîß ESTRUTURA COMPLETA DE UMA MCP TOOL")
print("="*70)

print("""
from claude_code_sdk import tool
from typing import Dict, Any

@tool(
    name="calculadora",                  # Nome √∫nico
    description="Calcula express√µes",    # Descri√ß√£o clara
    input_schema={                       # Schema dos par√¢metros
        "type": "object",
        "properties": {
            "expression": {
                "type": "string",
                "description": "Express√£o matem√°tica"
            }
        },
        "required": ["expression"]       # Par√¢metros obrigat√≥rios
    }
)
async def calculadora_tool(args: Dict[str, Any]) -> Dict[str, Any]:
    # üî¥ SEMPRE async def, NUNCA s√≥ def!

    # Pegar par√¢metros do dicion√°rio args
    expr = args.get("expression", "0")

    # Processar
    resultado = eval(expr)

    # üî¥ ESTRUTURA DE RETORNO OBRIGAT√ìRIA - MEMORIZE!
    return {
        "content": [
            {
                "type": "text",
                "text": f"Resultado: {resultado}"
            }
        ]
    }
""")

print("\n" + "="*70)
print("üéÆ COMO USAR NO CLAUDE")
print("="*70)

print("""
from claude_code_sdk import query, ClaudeCodeOptions

# PASSO 1: Configurar op√ß√µes permitindo a ferramenta
options = ClaudeCodeOptions(
    allowed_tools=["calculadora"],    # üî¥ CR√çTICO: Permitir sua tool!
    temperature=0.2
)

# PASSO 2: Usar com query()
async def main():
    prompt = "Use a calculadora para somar 42 + 17"

    async for msg in query(prompt, options=options):
        print(msg)

# PASSO 3: Executar
import asyncio
asyncio.run(main())
""")

print("\n" + "="*70)
print("‚ùå ERROS COMUNS (VOC√ä FEZ ESTES!)")
print("="*70)

print("""
‚ùå ERRO 1: N√£o usar async
   ERRADO:  def minha_tool(args):
   CERTO:   async def minha_tool(args):

‚ùå ERRO 2: Retorno errado
   ERRADO:  return resultado
   ERRADO:  return {"result": resultado}
   CERTO:   return {"content": [{"type": "text", "text": str(resultado)}]}

‚ùå ERRO 3: Esquecer allowed_tools
   ERRADO:  options = ClaudeCodeOptions()
   CERTO:   options = ClaudeCodeOptions(allowed_tools=["minha_tool"])

‚ùå ERRO 4: Args n√£o √© dicion√°rio
   ERRADO:  async def tool(expression: str)
   CERTO:   async def tool(args: Dict[str, Any])
""")

print("\n" + "="*70)
print("üìù EXEMPLO COMPLETO - FERRAMENTA DE AN√ÅLISE")
print("="*70)

print("""
@tool(
    name="analisador_codigo",
    description="Analisa m√©tricas de c√≥digo Python",
    input_schema={
        "type": "object",
        "properties": {
            "codigo": {"type": "string"},
            "metrica": {
                "type": "string",
                "enum": ["linhas", "funcoes", "complexidade"]
            }
        },
        "required": ["codigo", "metrica"]
    }
)
async def analisador_codigo(args: Dict[str, Any]) -> Dict[str, Any]:
    codigo = args.get("codigo", "")
    metrica = args.get("metrica", "linhas")

    if metrica == "linhas":
        resultado = f"C√≥digo tem {codigo.count('\\n')+1} linhas"
    elif metrica == "funcoes":
        resultado = f"Encontrei {codigo.count('def ')} fun√ß√µes"
    else:
        resultado = "M√©trica n√£o implementada"

    return {
        "content": [{"type": "text", "text": resultado}]
    }
""")

print("\n" + "="*70)
print("üèÜ CHECKLIST PARA SCORE 100")
print("="*70)

print("""
‚ñ° Sei usar @tool decorator
‚ñ° Sempre uso async def
‚ñ° Retorno {"content": [{"type": "text", "text": "..."}]}
‚ñ° Uso Dict[str, Any] para args
‚ñ° Adiciono em allowed_tools
‚ñ° Sei criar input_schema
‚ñ° Entendo properties e required
‚ñ° Posso criar tools com estado
‚ñ° Sei registrar m√∫ltiplas tools
‚ñ° Consigo debugar erros de MCP
""")

print("\n" + "="*70)
print("üöÄ PR√ìXIMOS PASSOS")
print("="*70)

print("""
1. PRATIQUE: Crie 3 MCP tools diferentes
   - Uma para manipular strings
   - Uma para fazer c√°lculos
   - Uma com estado persistente

2. TESTE: Use suas tools com Claude

3. AVANCE: Aprenda sobre Hooks (Gap #2)

Diego, voc√™ est√° a 20 pontos de resolver este gap!
Dedique 30 minutos hoje para praticar MCP Tools.

Score atual: 46/100
Score ap√≥s dominar MCP: 66/100 (+20 pontos!)
""")

print("\n" + "="*70)
print("üíæ Salvando resumo...")

# Salvar progresso
import json
from datetime import datetime

progresso = {
    "aluno": "Diego Fornalha",
    "data": datetime.now().isoformat(),
    "gap": "MCP Tools",
    "status": "estudando",
    "score_antes": 46,
    "score_potencial": 66,
    "conceitos_aprendidos": [
        "@tool decorator",
        "async functions",
        "return format",
        "allowed_tools",
        "input_schema"
    ]
}

with open("mcp_progresso_diego.json", "w") as f:
    json.dump(progresso, f, indent=2)

print("‚úÖ Progresso salvo em mcp_progresso_diego.json")
print("\nüéØ Execute novamente quando quiser revisar!")
print("="*70)