"""Validador de sess√µes robusto com m√∫ltiplas verifica√ß√µes de seguran√ßa."""

import os
import glob
import re
from typing import List, Optional, Set, Dict, Any
import uuid
import logging
from pathlib import Path
from datetime import datetime

logger = logging.getLogger(__name__)

class SessionValidator:
    """Valida e verifica a exist√™ncia de sess√µes reais no sistema."""
    
    def __init__(self):
        self.project_path = '/.claude/projects/-home-suthub--claude-api-claude-code-app-cc-sdk-chat'
        
    def get_real_session_ids(self) -> Set[str]:
        """Retorna conjunto de IDs de sess√£o que realmente existem no sistema."""
        session_ids = set()
        
        # Verifica arquivos .jsonl no projeto
        if os.path.exists(self.project_path):
            pattern = os.path.join(self.project_path, '*.jsonl')
            jsonl_files = glob.glob(pattern)
            
            for file_path in jsonl_files:
                filename = os.path.basename(file_path)
                if filename.endswith('.jsonl'):
                    session_id = filename.replace('.jsonl', '')
                    # Valida se √© um UUID v√°lido
                    if self.is_valid_uuid(session_id):
                        session_ids.add(session_id)
        
        return session_ids
    
    def is_valid_uuid(self, uuid_string: str) -> bool:
        """Verifica se a string √© um UUID v√°lido com valida√ß√£o rigorosa."""
        if not uuid_string or not isinstance(uuid_string, str):
            return False
            
        # Remove espa√ßos em branco
        uuid_string = uuid_string.strip()
        
        # Verifica comprimento b√°sico (UUID tem 36 caracteres com h√≠fens)
        if len(uuid_string) != 36:
            return False
        
        # Verifica formato UUID com regex mais rigoroso
        uuid_pattern = re.compile(
            r'^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$',
            re.IGNORECASE
        )
        
        if not uuid_pattern.match(uuid_string):
            return False
            
        try:
            # Valida√ß√£o final com biblioteca UUID
            uuid_obj = uuid.UUID(uuid_string)
            
            # Verifica se n√£o √© UUID nulo
            if str(uuid_obj) == '00000000-0000-0000-0000-000000000000':
                return False
                
            # Verifica vers√£o do UUID (aceita vers√µes 1, 3, 4, 5)
            if uuid_obj.version not in [1, 3, 4, 5]:
                return False
                
            return True
            
        except (ValueError, TypeError):
            return False
    
    def validate_session_id_format(self, session_id: str) -> Dict[str, Any]:
        """Valida√ß√£o detalhada do formato do session_id."""
        result = {
            'valid': False,
            'errors': [],
            'warnings': [],
            'normalized': None,
            'uuid_version': None,
            'uuid_variant': None
        }
        
        if not session_id:
            result['errors'].append('Session ID n√£o pode estar vazio')
            return result
        
        if not isinstance(session_id, str):
            result['errors'].append('Session ID deve ser uma string')
            return result
        
        # Normaliza entrada
        normalized = session_id.strip().lower()
        result['normalized'] = normalized
        
        # Verifica caracteres permitidos
        if not re.match(r'^[0-9a-f-]+$', normalized):
            result['errors'].append('Session ID cont√©m caracteres inv√°lidos')
            return result
        
        # Verifica estrutura b√°sica
        parts = normalized.split('-')
        if len(parts) != 5:
            result['errors'].append('Session ID deve ter 5 partes separadas por h√≠fen')
            return result
        
        # Verifica tamanho de cada parte
        expected_lengths = [8, 4, 4, 4, 12]
        for i, (part, expected) in enumerate(zip(parts, expected_lengths)):
            if len(part) != expected:
                result['errors'].append(f'Parte {i+1} deve ter {expected} caracteres, tem {len(part)}')
        
        if result['errors']:
            return result
        
        # Valida√ß√£o com UUID library
        try:
            uuid_obj = uuid.UUID(normalized)
            result['uuid_version'] = uuid_obj.version
            result['uuid_variant'] = uuid_obj.variant
            
            # Valida√ß√µes espec√≠ficas por vers√£o
            if uuid_obj.version == 4:
                # UUID v4 deve ser aleat√≥rio
                if normalized == '00000000-0000-4000-8000-000000000000':
                    result['warnings'].append('UUID v4 parece ser um template, n√£o aleat√≥rio')
            
            result['valid'] = True
            
        except ValueError as e:
            result['errors'].append(f'UUID inv√°lido: {str(e)}')
        
        return result
    
    def session_exists(self, session_id: str) -> bool:
        """Verifica se uma sess√£o espec√≠fica existe no sistema."""
        if not session_id or not self.is_valid_uuid(session_id):
            return False
            
        real_sessions = self.get_real_session_ids()
        return session_id in real_sessions
    
    def is_temporary_session(self, session_id: str) -> bool:
        """Verifica se um session_id √© tempor√°rio."""
        if not session_id:
            return False
            
        return (
            session_id.startswith('temp-') or 
            session_id == 'awaiting-real-session' or
            not self.is_valid_uuid(session_id)
        )
    
    def get_session_file_path(self, session_id: str) -> Optional[str]:
        """Retorna o caminho do arquivo da sess√£o se existir."""
        if not self.session_exists(session_id):
            return None
            
        file_path = os.path.join(self.project_path, f"{session_id}.jsonl")
        if os.path.exists(file_path):
            return file_path
            
        return None
    
    def validate_session_for_redirect(self, session_id: str) -> dict:
        """Valida se uma sess√£o pode ser usada para redirecionamento."""
        result = {
            'valid': False,
            'exists': False,
            'is_temporary': False,
            'can_redirect': False,
            'session_id': session_id,
            'error': None
        }
        
        if not session_id:
            result['error'] = 'Session ID vazio'
            return result
            
        result['is_temporary'] = self.is_temporary_session(session_id)
        result['exists'] = self.session_exists(session_id)
        result['valid'] = self.is_valid_uuid(session_id)
        
        # S√≥ pode redirecionar se:
        # 1. √â um UUID v√°lido
        # 2. A sess√£o realmente existe no sistema
        # 3. N√£o √© uma sess√£o tempor√°ria
        result['can_redirect'] = (
            result['valid'] and 
            result['exists'] and 
            not result['is_temporary']
        )
        
        if not result['can_redirect']:
            if result['is_temporary']:
                result['error'] = f'Sess√£o tempor√°ria n√£o pode ser usada para redirecionamento: {session_id}'
            elif not result['exists']:
                result['error'] = f'Sess√£o n√£o existe no sistema: {session_id}'
            elif not result['valid']:
                result['error'] = f'Session ID inv√°lido: {session_id}'
        
        return result
    
    def validate_and_migrate_session(self, session_id: str) -> tuple[str, bool]:
        """
        Valida e migra uma sess√£o se necess√°rio.
        
        Retorna: (session_id_validado, foi_migrado)
        """
        import uuid
        
        # Se √© tempor√°ria ou inv√°lida, gera novo UUID
        if self.is_temporary_session(session_id) or not self.is_valid_uuid(session_id):
            # Gera novo UUID v√°lido
            new_session_id = str(uuid.uuid4())
            print(f"üîÑ Migrando sess√£o tempor√°ria {session_id} ‚Üí {new_session_id}")
            return new_session_id, True
        
        # Se j√° √© v√°lida, retorna como est√°
        return session_id, False
    
    def validate_session_security(self, session_id: str, client_ip: Optional[str] = None) -> Dict[str, Any]:
        """Valida√ß√£o completa de seguran√ßa para uma sess√£o."""
        result = {
            'session_id': session_id,
            'valid': False,
            'security_score': 0,
            'issues': [],
            'recommendations': [],
            'risk_level': 'unknown',
            'allowed': False
        }
        
        try:
            # 1. Valida√ß√£o de formato
            format_result = self.validate_session_id_format(session_id)
            if not format_result['valid']:
                result['issues'].extend(format_result['errors'])
                result['risk_level'] = 'high'
                return result
            
            result['security_score'] += 30  # Base score para formato v√°lido
            
            # 2. Verifica exist√™ncia da sess√£o
            if not self.session_exists(session_id):
                result['issues'].append('Sess√£o n√£o existe no sistema')
                result['risk_level'] = 'medium'
                return result
            
            result['security_score'] += 20  # Score por existir
            
            # 3. Verifica se n√£o √© tempor√°ria
            if self.is_temporary_session(session_id):
                result['issues'].append('Sess√£o tempor√°ria n√£o √© permitida')
                result['risk_level'] = 'medium'
                return result
            
            result['security_score'] += 20  # Score por n√£o ser tempor√°ria
            
            # 4. Valida√ß√µes de arquivo
            file_path = self.get_session_file_path(session_id)
            if file_path:
                file_result = self._validate_session_file_security(file_path)
                result['security_score'] += file_result['score']
                result['issues'].extend(file_result['issues'])
                result['recommendations'].extend(file_result['recommendations'])
            
            # 5. Determina n√≠vel de risco final
            if result['security_score'] >= 80:
                result['risk_level'] = 'low'
                result['allowed'] = True
                result['valid'] = True
            elif result['security_score'] >= 60:
                result['risk_level'] = 'medium'
                result['allowed'] = len(result['issues']) == 0
                result['valid'] = result['allowed']
            else:
                result['risk_level'] = 'high'
                result['allowed'] = False
                result['valid'] = False
            
            return result
            
        except Exception as e:
            logger.error(f"Erro na valida√ß√£o de seguran√ßa da sess√£o {session_id}: {e}")
            result['issues'].append(f'Erro interno na valida√ß√£o: {str(e)}')
            result['risk_level'] = 'high'
            result['allowed'] = False
            return result
    
    def _validate_session_file_security(self, file_path: str) -> Dict[str, Any]:
        """Valida seguran√ßa do arquivo de sess√£o."""
        result = {
            'score': 0,
            'issues': [],
            'recommendations': []
        }
        
        try:
            file_path_obj = Path(file_path)
            
            # Verifica se arquivo existe
            if not file_path_obj.exists():
                result['issues'].append('Arquivo de sess√£o n√£o encontrado')
                return result
            
            result['score'] += 10
            
            # Verifica permiss√µes do arquivo
            stat = file_path_obj.stat()
            permissions = oct(stat.st_mode)[-3:]
            
            # Arquivo deve ser leg√≠vel pelo usu√°rio/grupo mas n√£o por outros
            if permissions.endswith('4') or permissions.endswith('6'):
                result['issues'].append('Arquivo de sess√£o tem permiss√µes muito abertas')
            else:
                result['score'] += 10
            
            # Verifica tamanho do arquivo (arquivos muito grandes podem ser suspeitos)
            file_size = stat.st_size
            if file_size > 100 * 1024 * 1024:  # 100MB
                result['issues'].append('Arquivo de sess√£o muito grande (>100MB)')
            elif file_size > 50 * 1024 * 1024:  # 50MB
                result['recommendations'].append('Arquivo de sess√£o grande (>50MB), considere limpeza')
                result['score'] += 5
            else:
                result['score'] += 10
            
            # Verifica idade do arquivo
            age_hours = (datetime.now().timestamp() - stat.st_mtime) / 3600
            if age_hours > 24 * 30:  # 30 dias
                result['recommendations'].append('Sess√£o antiga (>30 dias)')
            elif age_hours < 24:  # Menos de 1 dia
                result['score'] += 10
            else:
                result['score'] += 5
            
            return result
            
        except Exception as e:
            result['issues'].append(f'Erro ao validar arquivo: {str(e)}')
            return result
    
    def scan_for_suspicious_sessions(self) -> Dict[str, List[str]]:
        """Escaneia por sess√µes suspeitas no sistema."""
        suspicious = {
            'invalid_format': [],
            'missing_files': [],
            'large_files': [],
            'old_sessions': [],
            'empty_sessions': []
        }
        
        try:
            real_sessions = self.get_real_session_ids()
            
            for session_id in real_sessions:
                # Verifica formato
                if not self.is_valid_uuid(session_id):
                    suspicious['invalid_format'].append(session_id)
                    continue
                
                # Verifica arquivo
                file_path = self.get_session_file_path(session_id)
                if not file_path:
                    suspicious['missing_files'].append(session_id)
                    continue
                
                try:
                    file_path_obj = Path(file_path)
                    stat = file_path_obj.stat()
                    
                    # Arquivo muito grande
                    if stat.st_size > 50 * 1024 * 1024:
                        suspicious['large_files'].append(session_id)
                    
                    # Arquivo vazio
                    if stat.st_size == 0:
                        suspicious['empty_sessions'].append(session_id)
                    
                    # Sess√£o muito antiga
                    age_days = (datetime.now().timestamp() - stat.st_mtime) / (24 * 3600)
                    if age_days > 30:
                        suspicious['old_sessions'].append(session_id)
                        
                except Exception as e:
                    logger.warning(f"Erro ao verificar arquivo da sess√£o {session_id}: {e}")
                    suspicious['missing_files'].append(session_id)
            
            return suspicious
            
        except Exception as e:
            logger.error(f"Erro no scan de sess√µes suspeitas: {e}")
            return suspicious
    
    def cleanup_invalid_sessions(self, dry_run: bool = True) -> Dict[str, Any]:
        """Remove sess√µes inv√°lidas ou suspeitas."""
        result = {
            'dry_run': dry_run,
            'removed_count': 0,
            'removed_sessions': [],
            'errors': [],
            'size_recovered': 0
        }
        
        try:
            suspicious = self.scan_for_suspicious_sessions()
            
            # Remove sess√µes com formato inv√°lido
            for session_id in suspicious['invalid_format']:
                try:
                    if not dry_run:
                        file_path = os.path.join(self.project_path, f"{session_id}.jsonl")
                        if os.path.exists(file_path):
                            # EXCE√á√ÉO IMPORTANTE: NUNCA APAGAR FAVORITOS!
                            if session_id == "00000000-0000-0000-0000-000000000002":
                                logger.warning(f"‚≠ê IGNORANDO ARQUIVO DE FAVORITOS: {file_path}")
                                continue
                            size = os.path.getsize(file_path)
                            os.remove(file_path)
                            result['size_recovered'] += size
                    
                    result['removed_sessions'].append(session_id)
                    result['removed_count'] += 1
                    
                except Exception as e:
                    result['errors'].append(f"Erro ao remover {session_id}: {str(e)}")
            
            # Remove sess√µes vazias
            for session_id in suspicious['empty_sessions']:
                try:
                    if not dry_run:
                        file_path = os.path.join(self.project_path, f"{session_id}.jsonl")
                        if os.path.exists(file_path):
                            # EXCE√á√ÉO: ARQUIVO DE FAVORITOS NUNCA DEVE SER APAGADO!
                            if session_id == "00000000-0000-0000-0000-000000000002":
                                logger.warning(f"‚≠ê PRESERVANDO FAVORITOS: {file_path}")
                                continue
                            os.remove(file_path)
                    
                    result['removed_sessions'].append(session_id)
                    result['removed_count'] += 1
                    
                except Exception as e:
                    result['errors'].append(f"Erro ao remover sess√£o vazia {session_id}: {str(e)}")
            
            return result
            
        except Exception as e:
            result['errors'].append(f"Erro geral na limpeza: {str(e)}")
            return result