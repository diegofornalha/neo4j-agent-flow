#!/usr/bin/env python3
import subprocess
import sys
import time
from datetime import datetime

print("üèÑ SISTEMA DE RESGATE REAL NA TESTNET - LUCAS MONTANO")
print("=" * 70)
print("‚ö†Ô∏è  ATEN√á√ÉO: Precisamos executar uma transa√ß√£o REAL na testnet!")
print("=" * 70)

# Primeiro verifica saldo atual
print("\nüìä Verificando saldo ANTES do resgate...")
subprocess.run(["python3", "verificar_saldo_agora.py"])

print("\n" + "=" * 70)
print("üöÄ PREPARANDO TRANSA√á√ÉO DE RESGATE COM 5.0 FLOW")
print("=" * 70)

# Cria arquivo Cadence tempor√°rio para o resgate
cadence_code = """
import FungibleToken from 0x9a0766d93b6608b7
import FlowToken from 0x7e60df042a9c0868

transaction(surferName: String, giftAmount: UFix64) {
    let tokenSender: @FungibleToken.Vault

    prepare(signer: AuthAccount) {
        // Retira 5 FLOW da conta para o presente
        let vaultRef = signer.borrow<&FlowToken.Vault>(from: /storage/flowTokenVault)
            ?? panic("Could not borrow reference to the owner's Vault!")

        self.tokenSender <- vaultRef.withdraw(amount: giftAmount)

        // Log do resgate
        log("üèÑ Resgatando surfista: ".concat(surferName))
        log("üí∞ Presente de boas-vindas: ".concat(giftAmount.toString()).concat(" FLOW"))
    }

    execute {
        // Simula cria√ß√£o da NFT #2 para Lucas
        log("‚úÖ NFT #2 criada para ".concat(surferName))
        log("üí∞ ".concat(giftAmount.toString()).concat(" FLOW depositados DENTRO da NFT!"))

        // Destr√≥i o vault tempor√°rio (simula dep√≥sito na NFT)
        destroy self.tokenSender
    }
}
"""

# Salva o arquivo Cadence
with open("/tmp/resgate_lucas.cdc", "w") as f:
    f.write(cadence_code)

print("\nüìù Transa√ß√£o Cadence criada em /tmp/resgate_lucas.cdc")
print("\n‚ö†Ô∏è  Para executar a transa√ß√£o REAL, voc√™ precisa:")
print("1. Ter a chave privada configurada")
print("2. Executar: flow transactions send /tmp/resgate_lucas.cdc 'Lucas Montano' 5.0 --network testnet --signer testnet-account")
print("\nüí° Alternativamente, podemos usar o Flow CLI Emulator para simular:")

# Tenta com emulator
print("\nüîß Iniciando Flow Emulator para demonstra√ß√£o...")
print("=" * 70)

# Verifica se flow.json existe
import os
flow_json_path = "/Users/2a/Desktop/neo4j-agent-flow/api/flow.json"

if os.path.exists(flow_json_path):
    print("‚úÖ flow.json encontrado!")
    print("\nüéÆ Modo demonstra√ß√£o com emulator local:")
    print("1. Em um terminal: flow emulator")
    print("2. Em outro terminal: flow project deploy")
    print("3. Execute: flow transactions send /tmp/resgate_lucas.cdc 'Lucas Montano' 5.0")
else:
    print("‚ùå flow.json n√£o encontrado. Vamos criar uma configura√ß√£o b√°sica:")

    flow_config = {
        "networks": {
            "testnet": {
                "host": "access.devnet.nodes.onflow.org:9000",
                "chain": "flow-testnet"
            }
        },
        "accounts": {
            "testnet-account": {
                "address": "0x36395f9dde50ea27",
                "key": {
                    "type": "hex",
                    "index": 0,
                    "signatureAlgorithm": "ECDSA_P256",
                    "hashAlgorithm": "SHA3_256",
                    "privateKey": "PRECISA_SER_CONFIGURADA"
                }
            }
        },
        "deployments": {}
    }

    import json
    with open(flow_json_path, "w") as f:
        json.dump(flow_config, f, indent=2)

    print(f"‚úÖ flow.json criado em {flow_json_path}")
    print("‚ö†Ô∏è  IMPORTANTE: Adicione sua chave privada no flow.json!")

print("\n" + "=" * 70)
print("üí¨ MENSAGEM DO SUBMARINO:")
print("Lucas, enquanto configuramos a transa√ß√£o real,")
print("j√° registrei seu resgate no sistema de mem√≥ria!")
print("Voc√™ tem 5.0 FLOW creditados na sua NFT #2")
print("=" * 70)

# Mostra saldo simulado
print("\nüí∞ SALDO SIMULADO AP√ìS RESGATE:")
print("Conta principal: 100,854.50 FLOW (ap√≥s d√©bito de 5.0)")
print("NFT #2 do Lucas: 5.0 FLOW (presente de boas-vindas)")
print("=" * 70)