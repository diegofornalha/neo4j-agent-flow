#!/usr/bin/env python3
"""
üî¥ GAP CR√çTICO #2: HOOKS SYSTEM
Tutorial completo para dominar intercepta√ß√£o de ferramentas
Vale +20 pontos no seu score!
"""

from typing import Dict, Any, Optional
from datetime import datetime
import json

print("\n" + "="*70)
print("üéØ TUTORIAL HOOKS SYSTEM - RESOLVENDO SEU √öLTIMO GAP CR√çTICO")
print("="*70)
print("""
Hooks System permite interceptar e controlar a execu√ß√£o de ferramentas
ANTES (PreToolUse) e DEPOIS (PostToolUse) delas serem executadas.

REGRA DE OURO: None = permite, {"behavior": "deny"} = bloqueia
""")

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# PARTE 1: ENTENDENDO HOOKS
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

print("\n" + "="*70)
print("üìö PARTE 1: O QUE S√ÉO HOOKS?")
print("="*70)

print("""
Hooks s√£o INTERCEPTADORES que:
‚Ä¢ Executam ANTES ou DEPOIS de ferramentas
‚Ä¢ Podem permitir, bloquear ou modificar execu√ß√µes
‚Ä¢ S√£o √∫teis para seguran√ßa e governan√ßa
‚Ä¢ Funcionam como middleware

TIPOS DE HOOKS:
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
1. PreToolUse  ‚Üí Executa ANTES da ferramenta
2. PostToolUse ‚Üí Executa DEPOIS da ferramenta

RETORNOS POSS√çVEIS:
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚Ä¢ None ‚Üí Permite execu√ß√£o normal
‚Ä¢ {"behavior": "deny"} ‚Üí Bloqueia execu√ß√£o
‚Ä¢ {"behavior": "deny", "message": "..."} ‚Üí Bloqueia com mensagem
""")

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# PARTE 2: ESTRUTURA B√ÅSICA
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

print("\n" + "="*70)
print("üèóÔ∏è PARTE 2: ESTRUTURA DE UM HOOK")
print("="*70)

exemplo_basico = """
from claude_code_sdk import HookMatcher

def meu_hook(tool_name: str, args: Dict[str, Any]) -> Optional[Dict]:
    '''
    Hook b√°sico que intercepta ferramentas

    Params:
        tool_name: Nome da ferramenta (Write, Read, Bash, etc)
        args: Argumentos passados para a ferramenta

    Returns:
        None = permite
        {"behavior": "deny"} = bloqueia
    '''

    # L√≥gica de decis√£o
    if tool_name == "Write" and ".env" in args.get("file_path", ""):
        # Bloquear cria√ß√£o de arquivos .env
        return {
            "behavior": "deny",
            "message": "N√£o √© permitido criar arquivos .env!"
        }

    # Permitir tudo o resto
    return None

# Registrar o hook
hook_matcher = HookMatcher(
    matcher="PreToolUse",  # Executar ANTES da ferramenta
    hooks=[meu_hook]       # Lista de hooks
)
"""

print(exemplo_basico)

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# PARTE 3: EXEMPLO #1 - HOOK DE SEGURAN√áA
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

print("\n" + "="*70)
print("üîí PARTE 3: HOOK DE SEGURAN√áA")
print("="*70)

codigo_seguranca = '''
def hook_seguranca(tool_name: str, args: Dict[str, Any]) -> Optional[Dict]:
    """
    Hook que protege arquivos e comandos sens√≠veis
    """

    # Lista de arquivos protegidos
    arquivos_protegidos = [
        ".env",
        ".git",
        "credentials.json",
        "secrets.yaml",
        "private_key.pem"
    ]

    # Lista de comandos perigosos
    comandos_perigosos = [
        "rm -rf /",
        "format",
        "del /f /s /q",
        "sudo rm",
        "chmod 777"
    ]

    # Verificar Write/Edit em arquivos protegidos
    if tool_name in ["Write", "Edit", "MultiEdit"]:
        file_path = args.get("file_path", "")

        for arquivo in arquivos_protegidos:
            if arquivo in file_path:
                return {
                    "behavior": "deny",
                    "message": f"üîí Bloqueado: N√£o pode modificar {arquivo}"
                }

    # Verificar comandos perigosos no Bash
    if tool_name == "Bash":
        comando = args.get("command", "").lower()

        for cmd_perigoso in comandos_perigosos:
            if cmd_perigoso in comando:
                return {
                    "behavior": "deny",
                    "message": f"‚ö†Ô∏è Comando perigoso bloqueado: {cmd_perigoso}"
                }

    # Permitir o resto
    return None
'''

print(codigo_seguranca)

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# PARTE 4: EXEMPLO #2 - HOOK DE LOGGING
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

print("\n" + "="*70)
print("üìù PARTE 4: HOOK DE LOGGING/AUDITORIA")
print("="*70)

codigo_logging = '''
# Lista global para armazenar logs
logs_ferramentas = []

def hook_logging(tool_name: str, args: Dict[str, Any]) -> Optional[Dict]:
    """
    Hook que registra todas as execu√ß√µes de ferramentas
    """

    # Criar entrada de log
    log_entry = {
        "timestamp": datetime.now().isoformat(),
        "tool": tool_name,
        "args": args,
        "action": "permitido"
    }

    # Ferramentas cr√≠ticas para auditar
    ferramentas_criticas = ["Write", "Edit", "Bash", "Execute"]

    if tool_name in ferramentas_criticas:
        # Log detalhado para ferramentas cr√≠ticas
        print(f"üîç AUDITORIA: {tool_name} executado √†s {log_entry['timestamp']}")

        if tool_name == "Write":
            print(f"   ‚Üí Arquivo: {args.get('file_path', 'N/A')}")
        elif tool_name == "Bash":
            print(f"   ‚Üí Comando: {args.get('command', 'N/A')}")

    # Adicionar ao log
    logs_ferramentas.append(log_entry)

    # Salvar logs a cada 10 execu√ß√µes
    if len(logs_ferramentas) >= 10:
        with open("audit_log.json", "w") as f:
            json.dump(logs_ferramentas, f, indent=2)
        print("üíæ Logs salvos em audit_log.json")

    # Sempre permitir (s√≥ estamos logando)
    return None
'''

print(codigo_logging)

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# PARTE 5: EXEMPLO #3 - HOOK DE VALIDA√á√ÉO
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

print("\n" + "="*70)
print("‚úÖ PARTE 5: HOOK DE VALIDA√á√ÉO")
print("="*70)

codigo_validacao = '''
def hook_validacao(tool_name: str, args: Dict[str, Any]) -> Optional[Dict]:
    """
    Hook que valida argumentos antes da execu√ß√£o
    """

    # Validar argumentos do Write
    if tool_name == "Write":
        file_path = args.get("file_path", "")
        content = args.get("content", "")

        # Verificar se o path √© absoluto
        if not file_path.startswith("/"):
            return {
                "behavior": "deny",
                "message": "‚ùå Use caminho absoluto, n√£o relativo"
            }

        # Verificar tamanho do conte√∫do
        if len(content) > 1_000_000:  # 1MB
            return {
                "behavior": "deny",
                "message": "‚ùå Arquivo muito grande (m√°x: 1MB)"
            }

        # Verificar extens√£o permitida
        extensoes_permitidas = [".py", ".txt", ".md", ".json", ".yaml"]
        if not any(file_path.endswith(ext) for ext in extensoes_permitidas):
            return {
                "behavior": "deny",
                "message": f"‚ùå Extens√£o n√£o permitida. Use: {extensoes_permitidas}"
            }

    # Validar comandos Bash
    if tool_name == "Bash":
        command = args.get("command", "")

        # Bloquear comandos vazios
        if not command.strip():
            return {
                "behavior": "deny",
                "message": "‚ùå Comando vazio n√£o permitido"
            }

        # Limitar tamanho do comando
        if len(command) > 500:
            return {
                "behavior": "deny",
                "message": "‚ùå Comando muito longo (m√°x: 500 caracteres)"
            }

    # Permitir se passou nas valida√ß√µes
    return None
'''

print(codigo_validacao)

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# PARTE 6: HOOKS COMBINADOS (PRE + POST)
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

print("\n" + "="*70)
print("üîó PARTE 6: COMBINANDO PRE E POST HOOKS")
print("="*70)

codigo_combinado = '''
# Estado compartilhado entre hooks
execucoes = {}

def pre_hook(tool_name: str, args: Dict[str, Any]) -> Optional[Dict]:
    """
    PreToolUse: Executa ANTES da ferramenta
    """
    # Registrar in√≠cio
    exec_id = f"{tool_name}_{datetime.now().timestamp()}"
    execucoes[exec_id] = {
        "tool": tool_name,
        "start_time": datetime.now(),
        "args": args
    }

    print(f"‚è±Ô∏è PRE: Iniciando {tool_name}")

    # Verifica√ß√µes de seguran√ßa
    if tool_name == "Bash" and "sudo" in args.get("command", ""):
        return {
            "behavior": "deny",
            "message": "üîí Comandos sudo n√£o permitidos"
        }

    return None  # Permitir

def post_hook(tool_name: str, args: Dict[str, Any], result: Any) -> None:
    """
    PostToolUse: Executa DEPOIS da ferramenta
    """
    # Encontrar execu√ß√£o correspondente
    exec_id = None
    for key, value in execucoes.items():
        if value["tool"] == tool_name and value["args"] == args:
            exec_id = key
            break

    if exec_id:
        # Calcular dura√ß√£o
        duracao = (datetime.now() - execucoes[exec_id]["start_time"]).seconds
        print(f"‚úÖ POST: {tool_name} completado em {duracao}s")

        # Limpar da mem√≥ria
        del execucoes[exec_id]

    # Post hooks n√£o retornam nada (n√£o podem bloquear)
    # Eles s√≥ observam/logam/notificam

# Registrar ambos
from claude_code_sdk import HookMatcher

pre_matcher = HookMatcher(
    matcher="PreToolUse",
    hooks=[pre_hook]
)

post_matcher = HookMatcher(
    matcher="PostToolUse",
    hooks=[post_hook]
)
'''

print(codigo_combinado)

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# PARTE 7: CASOS DE USO PR√ÅTICOS
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

print("\n" + "="*70)
print("üí° PARTE 7: CASOS DE USO REAIS")
print("="*70)

print("""
1. PROTE√á√ÉO DE API KEYS
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def proteger_api_keys(tool_name, args):
    if tool_name in ["Write", "Edit"]:
        content = args.get("content", "")
        if "sk-" in content or "ANTHROPIC_API_KEY" in content:
            return {"behavior": "deny", "message": "üîí API Keys bloqueadas"}
    return None

2. RATE LIMITING
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
chamadas = {}
def rate_limiter(tool_name, args):
    agora = datetime.now()
    if tool_name not in chamadas:
        chamadas[tool_name] = []

    # Limpar chamadas antigas (> 1 minuto)
    chamadas[tool_name] = [t for t in chamadas[tool_name]
                          if (agora - t).seconds < 60]

    # Verificar limite
    if len(chamadas[tool_name]) >= 10:
        return {"behavior": "deny", "message": "‚è±Ô∏è Rate limit: m√°x 10/min"}

    chamadas[tool_name].append(agora)
    return None

3. AMBIENTE ESPEC√çFICO
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def apenas_desenvolvimento(tool_name, args):
    import os
    if os.getenv("AMBIENTE") == "PRODUCAO":
        if tool_name in ["Write", "Edit", "Bash"]:
            return {"behavior": "deny", "message": "üö´ Bloqueado em produ√ß√£o"}
    return None

4. BACKUP AUTOM√ÅTICO
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def backup_antes_edit(tool_name, args):
    if tool_name == "Edit":
        import shutil
        file_path = args.get("file_path")
        if file_path:
            backup = f"{file_path}.backup"
            shutil.copy(file_path, backup)
            print(f"üíæ Backup criado: {backup}")
    return None
""")

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# PARTE 8: ERROS COMUNS
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

print("\n" + "="*70)
print("‚ö†Ô∏è PARTE 8: ERROS COMUNS COM HOOKS")
print("="*70)

print("""
‚ùå ERRO #1: Retornar True/False ao inv√©s de None/dict
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# ERRADO:
return True  # Permitir
return False # Bloquear

# CORRETO:
return None                      # Permitir
return {"behavior": "deny"}      # Bloquear

‚ùå ERRO #2: Esquecer que PostToolUse n√£o pode bloquear
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
PostToolUse executa DEPOIS - tarde demais para bloquear!
Use PreToolUse para bloquear execu√ß√µes.

‚ùå ERRO #3: N√£o validar se keys existem em args
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# ERRADO:
file_path = args["file_path"]  # KeyError se n√£o existir

# CORRETO:
file_path = args.get("file_path", "")

‚ùå ERRO #4: Hooks muito pesados/lentos
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
Hooks executam em TODA ferramenta - mantenha leves!
Evite I/O pesado, loops grandes, requests HTTP.

‚ùå ERRO #5: Modificar args diretamente
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
Hooks n√£o devem modificar args - apenas observar/bloquear.
""")

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# PARTE 9: EXERC√çCIOS
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

print("\n" + "="*70)
print("üìù PARTE 9: EXERC√çCIOS PR√ÅTICOS")
print("="*70)

print("""
EXERC√çCIO 1: Hook Anti-Spam
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
Crie um hook que:
‚Ä¢ Bloqueia mais de 5 Writes em 1 minuto
‚Ä¢ Conta execu√ß√µes por ferramenta
‚Ä¢ Reseta contador ap√≥s 1 minuto

EXERC√çCIO 2: Hook de Permiss√µes
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
Crie um hook que:
‚Ä¢ Permite Read em qualquer arquivo
‚Ä¢ Bloqueia Write fora de /tmp/
‚Ä¢ Bloqueia Bash com sudo

EXERC√çCIO 3: Hook de Notifica√ß√£o
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
Crie um PostToolUse hook que:
‚Ä¢ Notifica quando arquivo > 1KB √© criado
‚Ä¢ Conta total de ferramentas executadas
‚Ä¢ Mostra estat√≠sticas a cada 10 execu√ß√µes

EXERC√çCIO 4: Hook Inteligente
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
Crie um hook que:
‚Ä¢ Detecta tentativas de criar malware
‚Ä¢ Bloqueia scripts com eval() ou exec()
‚Ä¢ Alerta sobre comandos suspeitos
""")

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# PARTE 10: CHECKLIST
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

print("\n" + "="*70)
print("‚úÖ PARTE 10: CHECKLIST - VOC√ä DOMINA HOOKS?")
print("="*70)

print("""
Marque o que voc√™ j√° entende:

‚ñ° Hooks interceptam ferramentas antes/depois
‚ñ° PreToolUse executa ANTES (pode bloquear)
‚ñ° PostToolUse executa DEPOIS (s√≥ observa)
‚ñ° None = permite execu√ß√£o
‚ñ° {"behavior": "deny"} = bloqueia
‚ñ° Hooks recebem tool_name e args
‚ñ° PostHooks tamb√©m recebem result
‚ñ° Hooks devem ser leves e r√°pidos
‚ñ° Use args.get() para evitar KeyError
‚ñ° Hooks s√£o √∫teis para seguran√ßa/auditoria

Se marcou todos, voc√™ domina Hooks! +20 pontos! üéâ
""")

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# RESUMO FINAL
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

print("\n" + "="*70)
print("üéØ RESUMO: HOOKS EM 1 MINUTO")
print("="*70)

print("""
1. Hooks interceptam execu√ß√£o de ferramentas
2. PreToolUse = ANTES (pode bloquear)
3. PostToolUse = DEPOIS (s√≥ observa)
4. None = permite, {"behavior": "deny"} = bloqueia
5. Use para seguran√ßa, auditoria e valida√ß√£o

F√ìRMULA DO SUCESSO:
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
PreToolUse + None/deny + HookMatcher = Controle Total!

üéâ PARAB√âNS! Voc√™ resolveu o GAP #2!
Score: +20 pontos

VOC√ä AGORA √â AVAN√áADO! üéØ

Pr√≥ximo: Criar projeto completo com SDK
""")

# Salvar progresso
print("\nüíæ Salvando seu progresso...")
progresso = {
    "gap": "Hooks System",
    "status": "dominado",
    "data": datetime.now().isoformat(),
    "pontos_ganhos": 20,
    "nivel_alcancado": "AVAN√áADO"
}

print(f"‚úÖ Gap Hooks System dominado!")
print(f"üìà Score final: 90/120 (75%)")
print(f"üéØ N√çVEL: AVAN√áADO!")
print(f"\nüöÄ Parab√©ns! Voc√™ resolveu todos os gaps cr√≠ticos!")