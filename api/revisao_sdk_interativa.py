#!/usr/bin/env python3
"""
üîÑ REVIS√ÉO INTERATIVA - CLAUDE CODE SDK
Vamos consolidar o que voc√™ aprendeu!
"""

import asyncio
from datetime import datetime
from pathlib import Path
import json

class RevisaoSDK:
    def __init__(self):
        self.conceitos_revisados = []
        self.score_atual = 11  # Score inicial
        self.conceitos_dominados = []
        self.conceitos_pendentes = []

    def revisar_conceitos_fundamentais(self):
        """Revisa os conceitos b√°sicos aprendidos"""

        print("\n" + "="*70)
        print("üìö REVIS√ÉO: CONCEITOS FUNDAMENTAIS")
        print("="*70)

        conceitos = {
            "query_vs_client": {
                "titulo": "query() vs ClaudeSDKClient",
                "aprendido": """
‚úÖ query()
   ‚Ä¢ Pergunta √∫nica, sem mem√≥ria
   ‚Ä¢ Stateless (cada pergunta √© isolada)
   ‚Ä¢ Mais simples de usar
   ‚Ä¢ Ideal para: tarefas pontuais

‚úÖ ClaudeSDKClient
   ‚Ä¢ Conversa cont√≠nua com contexto
   ‚Ä¢ Stateful (mant√©m hist√≥rico)
   ‚Ä¢ Mais complexo
   ‚Ä¢ Ideal para: di√°logos interativos
                """,
                "exemplo": """
# query() - Simples
async for msg in query("O que √© Python?"):
    print(msg.result)

# Client - Com contexto
client = ClaudeSDKClient()
await client.send_message("Ol√°")
async for msg in client.receive_response():
    print(msg.result)
                """,
                "quiz": {
                    "pergunta": "Quando usar query() ao inv√©s de Client?",
                    "resposta": "Para perguntas √∫nicas sem necessidade de contexto"
                }
            },
            "autenticacao": {
                "titulo": "Autentica√ß√£o Correta",
                "aprendido": """
‚úÖ SEMPRE USE: claude login
‚ùå NUNCA USE: ANTHROPIC_API_KEY

Por qu√™?
‚Ä¢ claude login = autentica√ß√£o segura oficial
‚Ä¢ API keys = m√©todo antigo, n√£o recomendado
‚Ä¢ Hooks bloqueiam uso de API keys automaticamente
                """,
                "exemplo": """
# Terminal
$ claude login

# No c√≥digo - NUNCA fa√ßa isso:
# client = Anthropic(api_key="sk-...")  ‚ùå

# Sempre fa√ßa isso:
from claude_code_sdk import query  ‚úÖ
                """,
                "quiz": {
                    "pergunta": "Como autenticar no Claude Code SDK?",
                    "resposta": "Usando 'claude login' no terminal"
                }
            },
            "claudecodeoptions": {
                "titulo": "ClaudeCodeOptions",
                "aprendido": """
Par√¢metros principais:
‚Ä¢ model: Modelo do Claude
‚Ä¢ temperature: Criatividade (0.0-1.0)
‚Ä¢ allowed_tools: Ferramentas permitidas
‚Ä¢ system_prompt: Contexto do sistema
‚Ä¢ max_tokens: Limite de tokens
                """,
                "exemplo": """
options = ClaudeCodeOptions(
    model="claude-3-5-sonnet-20241022",
    temperature=0.7,  # 0.1=consistente, 0.9=criativo
    allowed_tools=["File", "Search", "Bash"],
    system_prompt="Voc√™ √© um expert em Python"
)
                """,
                "quiz": {
                    "pergunta": "O que controla a criatividade das respostas?",
                    "resposta": "O par√¢metro temperature (0.0 a 1.0)"
                }
            }
        }

        for key, conceito in conceitos.items():
            print(f"\n{'‚îÄ'*70}")
            print(f"üìñ {conceito['titulo']}")
            print(conceito['aprendido'])

            if 'exemplo' in conceito:
                print("\nüí° Exemplo:")
                print(conceito['exemplo'])

            self.conceitos_revisados.append(key)

        return conceitos

    def revisar_ferramentas(self):
        """Revisa as ferramentas do SDK"""

        print("\n" + "="*70)
        print("üîß REVIS√ÉO: FERRAMENTAS DO SDK")
        print("="*70)

        ferramentas = {
            "file_tools": {
                "categoria": "üìÅ File Tools",
                "tools": [
                    ("Read", "Ler arquivos"),
                    ("Write", "Criar/sobrescrever arquivos"),
                    ("Edit", "Editar trechos espec√≠ficos"),
                    ("MultiEdit", "M√∫ltiplas edi√ß√µes")
                ]
            },
            "search_tools": {
                "categoria": "üîç Search Tools",
                "tools": [
                    ("Grep", "Buscar padr√µes em arquivos"),
                    ("Glob", "Buscar arquivos por nome"),
                    ("WebSearch", "Buscar na web"),
                    ("WebFetch", "Buscar conte√∫do de URL")
                ]
            },
            "system_tools": {
                "categoria": "‚öôÔ∏è System Tools",
                "tools": [
                    ("Bash", "Executar comandos shell"),
                    ("Execute", "Executar c√≥digo Python"),
                    ("TodoWrite", "Gerenciar tarefas"),
                    ("Task", "Delegar para sub-agentes")
                ]
            }
        }

        print("\nFerramentas dispon√≠veis com allowed_tools:\n")

        for categoria, dados in ferramentas.items():
            print(f"\n{dados['categoria']}")
            for tool, desc in dados['tools']:
                print(f"  ‚Ä¢ {tool}: {desc}")

        print("\nüí° Como usar:")
        print("""
options = ClaudeCodeOptions(
    allowed_tools=["File", "Search", "Bash"]  # Permite estas ferramentas
)
        """)

        return ferramentas

    def identificar_gaps_criticos(self):
        """Identifica e explica os gaps cr√≠ticos"""

        print("\n" + "="*70)
        print("üî¥ GAPS CR√çTICOS - FOCO NECESS√ÅRIO")
        print("="*70)

        gaps = {
            "mcp_tools": {
                "titulo": "MCP Tools (Model Context Protocol)",
                "importancia": "CR√çTICO - Score +20 pontos",
                "explicacao": """
MCP Tools permitem criar ferramentas customizadas:

```python
from claude_code_sdk import tool

@tool(
    name="minha_ferramenta",
    description="Descri√ß√£o da ferramenta",
    input_schema={...}
)
async def minha_ferramenta(args):
    # SEMPRE retorne {"content": [...]}
    return {
        "content": [{
            "type": "text",
            "text": "resultado"
        }]
    }
```

‚ö†Ô∏è REGRA DE OURO: Sempre retorne {"content": [...]}
                """,
                "exercicio": "gap_1_mcp_tools_tutorial.py"
            },
            "hooks_system": {
                "titulo": "Hooks System",
                "importancia": "CR√çTICO - Score +20 pontos",
                "explicacao": """
Hooks interceptam execu√ß√£o de ferramentas:

```python
from claude_code_sdk import HookMatcher

def validar(tool_name, args):
    if tool_name == "Write":
        # Bloquear
        return {"behavior": "deny"}
    # Permitir
    return None

hook = HookMatcher(
    matcher="PreToolUse",
    hooks=[validar]
)
```

‚ö†Ô∏è REGRA: None = permite, {"behavior": "deny"} = bloqueia
                """,
                "exercicio": "gap_2_hooks_tutorial.py"
            }
        }

        for gap_id, gap in gaps.items():
            print(f"\n{'‚îÄ'*70}")
            print(f"üéØ {gap['titulo']}")
            print(f"   Import√¢ncia: {gap['importancia']}")
            print(gap['explicacao'])
            print(f"\n   üìù Exerc√≠cio: {gap['exercicio']}")

        return gaps

    def calcular_evolucao(self):
        """Calcula a evolu√ß√£o do aprendizado"""

        print("\n" + "="*70)
        print("üìà SUA EVOLU√á√ÉO")
        print("="*70)

        # Simular evolu√ß√£o baseada no que foi revisado
        pontos_ganhos = 0

        # Conceitos b√°sicos revisados
        if "query_vs_client" in self.conceitos_revisados:
            pontos_ganhos += 5
            self.conceitos_dominados.append("Diferen√ßa query vs Client")

        if "autenticacao" in self.conceitos_revisados:
            pontos_ganhos += 5
            self.conceitos_dominados.append("Autentica√ß√£o com claude login")

        if "claudecodeoptions" in self.conceitos_revisados:
            pontos_ganhos += 5
            self.conceitos_dominados.append("ClaudeCodeOptions")

        # Atualizar score
        novo_score = self.score_atual + pontos_ganhos

        print(f"""
Score Inicial: {self.score_atual}/100
Pontos Ganhos: +{pontos_ganhos}
Score Atual: {novo_score}/100

‚úÖ Conceitos Dominados:""")
        for conceito in self.conceitos_dominados:
            print(f"   ‚Ä¢ {conceito}")

        print(f"""
üéØ Conceitos Pendentes (Gaps):
   ‚Ä¢ MCP Tools (CR√çTICO)
   ‚Ä¢ Hooks System (CR√çTICO)
   ‚Ä¢ ClaudeSDKClient avan√ßado
   ‚Ä¢ Streaming responses

üìä Progresso no Bootcamp:
   Fase 1 (Fundamentos): 40% conclu√≠do
   Fase 2 (Ferramentas): 0% conclu√≠do
   Fase 3 (Gaps Cr√≠ticos): 0% conclu√≠do
   Fase 4 (Expert): 0% conclu√≠do
        """)

        return novo_score

    def gerar_plano_proximos_passos(self, score):
        """Gera plano para pr√≥ximos passos"""

        print("\n" + "="*70)
        print("üöÄ PR√ìXIMOS PASSOS")
        print("="*70)

        if score < 30:
            print("""
üìå FASE 1 - FUNDAMENTOS (Voc√™ est√° aqui!)
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
1. Completar exerc√≠cios b√°sicos:
   python3 exercicios_praticos_pt_br.py 1
   python3 exercicios_praticos_pt_br.py 2

2. Praticar query() com diferentes op√ß√µes:
   ‚Ä¢ Variar temperature
   ‚Ä¢ Testar diferentes allowed_tools

3. Entender async/await profundamente
   ‚Ä¢ Todo c√≥digo SDK √© ass√≠ncrono!
            """)
        elif score < 60:
            print("""
üìå FASE 2 - FERRAMENTAS
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
1. Dominar File Tools:
   ‚Ä¢ Read, Write, Edit, MultiEdit

2. Dominar Search Tools:
   ‚Ä¢ Grep para buscar padr√µes
   ‚Ä¢ Glob para buscar arquivos

3. System Tools:
   ‚Ä¢ Bash para comandos
   ‚Ä¢ TodoWrite para organiza√ß√£o
            """)
        else:
            print("""
üìå FASE 3 - GAPS CR√çTICOS
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
1. MCP Tools (URGENTE):
   python3 gap_1_mcp_tools_tutorial.py

2. Hooks System (URGENTE):
   python3 gap_2_hooks_tutorial.py

3. Multi-agent com Task
            """)

        print("""
üí° DICA DO DIA:
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
"O segredo para dominar o SDK √© pr√°tica constante.
 Fa√ßa um exerc√≠cio por dia, mesmo que pequeno!"

üéØ Meta da Semana:
   ‚Ä¢ Aumentar score em +15 pontos
   ‚Ä¢ Dominar pelo menos 1 gap cr√≠tico
   ‚Ä¢ Criar 1 projeto pr√≥prio com SDK
        """)

    def salvar_progresso(self, score):
        """Salva o progresso da revis√£o"""

        progresso = {
            "data_revisao": datetime.now().isoformat(),
            "score_inicial": self.score_atual,
            "score_final": score,
            "conceitos_dominados": self.conceitos_dominados,
            "conceitos_revisados": self.conceitos_revisados
        }

        # Salvar em arquivo
        log_dir = Path.home() / '.claude' / 'logs'
        log_dir.mkdir(parents=True, exist_ok=True)

        arquivo = log_dir / 'revisao_sdk_progresso.json'

        # Carregar hist√≥rico existente
        if arquivo.exists():
            with open(arquivo, 'r') as f:
                historico = json.load(f)
        else:
            historico = []

        historico.append(progresso)

        with open(arquivo, 'w') as f:
            json.dump(historico, f, indent=2, ensure_ascii=False)

        print(f"\nüíæ Progresso salvo em: {arquivo}")

def main():
    """Executa a revis√£o interativa"""

    print("\n" + "="*70)
    print("üîÑ REVIS√ÉO INTERATIVA - CLAUDE CODE SDK")
    print("="*70)
    print("""
Vamos revisar tudo que voc√™ aprendeu at√© agora!
Esta revis√£o vai consolidar seu conhecimento.
    """)

    revisao = RevisaoSDK()

    # 1. Revisar conceitos fundamentais
    input("\n‚è∏Ô∏è Pressione ENTER para revisar CONCEITOS FUNDAMENTAIS...")
    revisao.revisar_conceitos_fundamentais()

    # 2. Revisar ferramentas
    input("\n‚è∏Ô∏è Pressione ENTER para revisar FERRAMENTAS...")
    revisao.revisar_ferramentas()

    # 3. Identificar gaps
    input("\n‚è∏Ô∏è Pressione ENTER para ver seus GAPS CR√çTICOS...")
    revisao.identificar_gaps_criticos()

    # 4. Calcular evolu√ß√£o
    input("\n‚è∏Ô∏è Pressione ENTER para ver sua EVOLU√á√ÉO...")
    novo_score = revisao.calcular_evolucao()

    # 5. Pr√≥ximos passos
    input("\n‚è∏Ô∏è Pressione ENTER para ver PR√ìXIMOS PASSOS...")
    revisao.gerar_plano_proximos_passos(novo_score)

    # 6. Salvar progresso
    revisao.salvar_progresso(novo_score)

    # Mensagem final
    print("\n" + "="*70)
    print("üéâ REVIS√ÉO COMPLETA!")
    print("="*70)
    print(f"""
Parab√©ns por revisar seu conhecimento!

üìä Resumo:
   ‚Ä¢ Score evoluiu: {revisao.score_atual} ‚Üí {novo_score}
   ‚Ä¢ Conceitos dominados: {len(revisao.conceitos_dominados)}
   ‚Ä¢ Gaps identificados: 2 cr√≠ticos

üéØ A√ß√£o Imediata:
   1. Execute: python3 exercicios_praticos_pt_br.py 1
   2. Depois: python3 gap_1_mcp_tools_tutorial.py

Continue assim e voc√™ ser√° EXPERT em 12 semanas! üöÄ
    """)

if __name__ == "__main__":
    main()