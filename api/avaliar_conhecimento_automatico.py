#!/usr/bin/env python3
"""
üéØ Avalia√ß√£o Autom√°tica de Conhecimento Claude Code SDK
Sistema para verificar n√≠vel atual e criar plano personalizado
"""

import json
from datetime import datetime
from pathlib import Path

def avaliar_conhecimento_base():
    """Avalia conhecimento b√°sico do SDK"""

    print("\n" + "="*70)
    print("üéØ AVALIA√á√ÉO INICIAL - CLAUDE CODE SDK BOOTCAMP")
    print("="*70)

    # Simulando respostas t√≠picas de um iniciante
    conhecimento_atual = {
        "conceitos_basicos": {
            "query_vs_client": False,  # N√£o sabe a diferen√ßa
            "autenticacao": False,     # N√£o conhece claude login
            "async_await": True,        # Conhece Python async
        },
        "ferramentas": {
            "file_tools": False,        # N√£o usou File, Edit, etc
            "search_tools": False,      # N√£o usou Grep, Glob
            "system_tools": False,      # N√£o usou Bash, Execute
        },
        "avancado": {
            "mcp_tools": False,         # GAP CR√çTICO #1
            "hooks_system": False,      # GAP CR√çTICO #2
            "multi_agent": False,       # N√£o conhece Task tool
        }
    }

    # Calcular score
    total_items = 9
    conhecidos = sum([
        conhecimento_atual["conceitos_basicos"]["query_vs_client"],
        conhecimento_atual["conceitos_basicos"]["autenticacao"],
        conhecimento_atual["conceitos_basicos"]["async_await"],
        conhecimento_atual["ferramentas"]["file_tools"],
        conhecimento_atual["ferramentas"]["search_tools"],
        conhecimento_atual["ferramentas"]["system_tools"],
        conhecimento_atual["avancado"]["mcp_tools"],
        conhecimento_atual["avancado"]["hooks_system"],
        conhecimento_atual["avancado"]["multi_agent"]
    ])

    score_inicial = int((conhecidos / total_items) * 100)

    # Identificar gaps
    gaps = []
    if not conhecimento_atual["conceitos_basicos"]["query_vs_client"]:
        gaps.append("query() vs ClaudeSDKClient")
    if not conhecimento_atual["conceitos_basicos"]["autenticacao"]:
        gaps.append("Autentica√ß√£o (claude login)")
    if not conhecimento_atual["avancado"]["mcp_tools"]:
        gaps.append("MCP Tools (GAP CR√çTICO)")
    if not conhecimento_atual["avancado"]["hooks_system"]:
        gaps.append("Hooks System (GAP CR√çTICO)")

    return score_inicial, gaps, conhecimento_atual

def criar_plano_personalizado(score, gaps):
    """Cria plano de estudos baseado no score e gaps"""

    plano = {
        "fase_1_fundamentos": {
            "semanas": "1-3",
            "objetivo": "Score 45‚Üí60",
            "topicos": [
                "‚úÖ query() para consultas simples",
                "‚úÖ ClaudeCodeOptions b√°sico",
                "‚úÖ Autentica√ß√£o com claude login",
                "‚úÖ Async/await patterns"
            ],
            "exercicios": [
                "01_hello_claude.py",
                "exercicios_praticos_pt_br.py (1-3)"
            ]
        },
        "fase_2_ferramentas": {
            "semanas": "4-6",
            "objetivo": "Score 60‚Üí70",
            "topicos": [
                "üìÅ File Tools (Read, Write, Edit)",
                "üîç Search Tools (Grep, Glob)",
                "‚öôÔ∏è System Tools (Bash, Execute)",
                "üìù TodoWrite para organiza√ß√£o"
            ],
            "exercicios": [
                "exercicios_praticos_pt_br.py (4-5)"
            ]
        },
        "fase_3_gaps_criticos": {
            "semanas": "7-10",
            "objetivo": "Score 70‚Üí85",
            "topicos": [
                "üî¥ MCP Tools - Criar ferramentas customizadas",
                "üî¥ Hooks System - Interceptar execu√ß√µes",
                "ü§ñ Multi-agent com Task tool"
            ],
            "exercicios": [
                "gap_1_mcp_tools_tutorial.py",
                "gap_2_hooks_tutorial.py",
                "exercicios_praticos_pt_br.py (6-7)"
            ]
        },
        "fase_4_expert": {
            "semanas": "11-12",
            "objetivo": "Score 85‚Üí100",
            "topicos": [
                "üöÄ ClaudeSDKClient avan√ßado",
                "üîÑ Streaming com receive_response()",
                "üéØ Orquestra√ß√£o multi-agente",
                "üíæ Integra√ß√£o Neo4j Memory"
            ],
            "projetos": [
                "Projeto final: Sistema completo com SDK"
            ]
        }
    }

    return plano

def gerar_relatorio():
    """Gera relat√≥rio completo de avalia√ß√£o"""

    print("\nüîç Analisando seu conhecimento atual...")
    score, gaps, conhecimento = avaliar_conhecimento_base()

    # Determinar n√≠vel
    if score < 40:
        nivel = "Iniciante"
        emoji = "üå±"
    elif score < 60:
        nivel = "B√°sico"
        emoji = "üåø"
    elif score < 75:
        nivel = "Intermedi√°rio"
        emoji = "üå≥"
    elif score < 90:
        nivel = "Avan√ßado"
        emoji = "üéØ"
    else:
        nivel = "Expert"
        emoji = "üèÜ"

    print("\n" + "="*70)
    print(f"üìä RESULTADO DA AVALIA√á√ÉO")
    print("="*70)
    print(f"\n{emoji} N√≠vel Atual: {nivel}")
    print(f"üìà Score: {score}/100")
    print(f"‚è±Ô∏è Tempo estimado at√© Expert: {12 if score < 40 else 8} semanas")

    if gaps:
        print(f"\nüéØ GAPS IDENTIFICADOS:")
        for gap in gaps:
            if "CR√çTICO" in gap:
                print(f"   üî¥ {gap}")
            else:
                print(f"   ‚ö†Ô∏è {gap}")

    # Criar plano
    plano = criar_plano_personalizado(score, gaps)

    print("\n" + "="*70)
    print("üìö SEU PLANO PERSONALIZADO DE ESTUDOS")
    print("="*70)

    for fase_nome, fase_dados in plano.items():
        print(f"\nüìå {fase_nome.upper().replace('_', ' ')}")
        print(f"   Semanas: {fase_dados.get('semanas', 'N/A')}")
        print(f"   Meta: {fase_dados.get('objetivo', 'N/A')}")

        if 'topicos' in fase_dados:
            print("\n   T√≥picos:")
            for topico in fase_dados['topicos']:
                print(f"      {topico}")

        if 'exercicios' in fase_dados:
            print("\n   Exerc√≠cios:")
            for exercicio in fase_dados['exercicios']:
                print(f"      ‚Üí {exercicio}")

        if 'projetos' in fase_dados:
            print("\n   Projetos:")
            for projeto in fase_dados['projetos']:
                print(f"      ‚Üí {projeto}")

    # Salvar resultado
    resultado = {
        "data": datetime.now().isoformat(),
        "score_inicial": score,
        "nivel": nivel,
        "gaps": gaps,
        "plano": plano
    }

    # Criar diret√≥rio se n√£o existir
    log_dir = Path.home() / '.claude' / 'logs'
    log_dir.mkdir(parents=True, exist_ok=True)

    # Salvar avalia√ß√£o
    arquivo = log_dir / 'bootcamp_avaliacao.json'
    with open(arquivo, 'w') as f:
        json.dump(resultado, f, indent=2, ensure_ascii=False)

    print(f"\nüíæ Avalia√ß√£o salva em: {arquivo}")

    # Pr√≥ximos passos imediatos
    print("\n" + "="*70)
    print("üöÄ COME√áAR AGORA")
    print("="*70)

    if score < 40:
        print("""
1Ô∏è‚É£ Primeiro exerc√≠cio (5 minutos):
   python3 01_hello_claude.py

2Ô∏è‚É£ Entender conceitos b√°sicos:
   - query() = pergunta √∫nica sem contexto
   - Client = conversa com mem√≥ria

3Ô∏è‚É£ Configurar autentica√ß√£o:
   claude login

üí° Dica: Comece simples! Um hello world funcional vale mais que teoria complexa.
""")
    elif score < 60:
        print("""
1Ô∏è‚É£ Praticar ferramentas b√°sicas:
   python3 exercicios_praticos_pt_br.py 1

2Ô∏è‚É£ Focar nos gaps cr√≠ticos:
   - MCP Tools: criar ferramentas customizadas
   - Hooks: interceptar execu√ß√µes

üí° Dica: Os gaps cr√≠ticos s√£o eliminat√≥rios em projetos reais!
""")
    else:
        print("""
1Ô∏è‚É£ Projetos avan√ßados:
   - Implementar sistema com MCP Tools
   - Criar hooks para governan√ßa

2Ô∏è‚É£ Integra√ß√£o Neo4j:
   - Persistir conhecimento
   - Criar sistema de mem√≥ria

üí° Dica: Foque em projetos pr√°ticos para consolidar conhecimento!
""")

    return resultado

if __name__ == "__main__":
    resultado = gerar_relatorio()

    print("\n" + "="*70)
    print("üí¨ MENSAGEM DO MENTOR")
    print("="*70)
    print("""
Ol√°! Sou seu mentor no Bootcamp Claude Code SDK.

Minha miss√£o √© transformar voc√™ em um EXPERT do SDK em 12 semanas.

Lembre-se:
‚Ä¢ Use query() para perguntas simples
‚Ä¢ Use Client para conversas com contexto
‚Ä¢ SEMPRE autentique com 'claude login'
‚Ä¢ MCP Tools e Hooks s√£o CR√çTICOS - n√£o pule!
‚Ä¢ Async/await sempre que poss√≠vel

Vamos come√ßar! üöÄ

Digite: python3 01_hello_claude.py
""")