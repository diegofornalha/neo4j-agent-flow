"""
Session Manager - Gerenciamento avan√ßado de sess√µes Claude Code.

Cria novas sess√µes no Claude Code SDK e retorna IDs reais.
"""

import subprocess
import asyncio
import json
import time
import logging
import threading
import weakref
from pathlib import Path
from datetime import datetime, timedelta
from typing import Optional, Dict, Any, List, Set
from collections import defaultdict
from dataclasses import dataclass, field


@dataclass
class SessionMetrics:
    """M√©tricas de uso de sess√£o."""
    created_at: datetime = field(default_factory=datetime.now)
    last_activity: datetime = field(default_factory=datetime.now)
    message_count: int = 0
    total_tokens: int = 0
    total_cost: float = 0.0
    connection_errors: int = 0


class ClaudeCodeSessionManager:
    """Gerenciador otimizado de sess√µes Claude Code SDK."""
    
    # Configura√ß√µes padr√£o
    MAX_SESSIONS = 500  # Aumentado - m√°ximo de sess√µes simult√¢neas
    SESSION_TIMEOUT_MINUTES = 0  # 0 = Sem timeout - sess√µes nunca expiram
    CLEANUP_INTERVAL_MINUTES = 0  # 0 = Sem limpeza autom√°tica
    MAX_CONNECTION_POOL_SIZE = 50  # Aumentado - pool de conex√µes
    
    def __init__(self):
        self.claude_projects = Path.home() / ".claude" / "projects"
        self.active_sessions: Dict[str, datetime] = {}  # session_id -> last_activity
        self.session_metrics: Dict[str, SessionMetrics] = {}  # session_id -> metrics
        self.orphaned_sessions: Set[str] = set()  # sess√µes √≥rf√£s detectadas
        self.connection_pool: List[Any] = []  # Pool de conex√µes reutiliz√°veis
        self.cleanup_task: Optional[asyncio.Task] = None
        self.scheduler_running = False
        self._lock = threading.Lock()
        
        # Logger para monitoramento
        self.logger = logging.getLogger(self.__class__.__name__)
        self.logger.setLevel(logging.INFO)
        
        # Task scheduler ser√° iniciado quando necess√°rio
        self._scheduler_started = False
        
        # Log configura√ß√£o de persist√™ncia
        self.logger.info("üîí Sess√µes configuradas como PERMANENTES - Nunca expiram")
        self.logger.info(f"‚öôÔ∏è Timeout: {self.SESSION_TIMEOUT_MINUTES} min (0 = desabilitado)")
        self.logger.info(f"üîß Limpeza autom√°tica: {self.CLEANUP_INTERVAL_MINUTES} min (0 = desabilitada)")
        
    async def create_new_claude_session(self) -> Optional[str]:
        """
        Cria nova sess√£o no Claude Code SDK e retorna ID real.
        
        Simula uma intera√ß√£o para for√ßar cria√ß√£o de nova sess√£o.
        """
        try:
            # Executa comando Claude Code para criar nova sess√£o
            # Isso for√ßar√° a cria√ß√£o de um novo arquivo .jsonl
            process = await asyncio.create_subprocess_exec(
                'claude', 'ol√°',
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE,
                cwd='/.claude/api-claude-code-app/cc-sdk-chat'
            )
            
            stdout, stderr = await process.communicate()
            
            if process.returncode == 0:
                # Aguarda arquivo ser criado
                await asyncio.sleep(1)
                
                # Busca o arquivo .jsonl mais recente
                return await self.get_latest_session_id()
            else:
                print(f"Erro ao criar sess√£o Claude: {stderr.decode()}")
                return None
                
        except Exception as e:
            print(f"Erro na cria√ß√£o de sess√£o: {e}")
            return None
    
    async def get_latest_session_id(self) -> Optional[str]:
        """Obt√©m ID da sess√£o mais recente."""
        if not self.claude_projects.exists():
            return None
        
        # Busca arquivos .jsonl mais recentes
        jsonl_files = []
        for project_dir in self.claude_projects.iterdir():
            if project_dir.is_dir():
                for jsonl_file in project_dir.glob("*.jsonl"):
                    jsonl_files.append(jsonl_file)
        
        if not jsonl_files:
            return None
        
        # Ordena por modifica√ß√£o mais recente
        jsonl_files.sort(key=lambda f: f.stat().st_mtime, reverse=True)
        latest_file = jsonl_files[0]
        
        try:
            # L√™ primeira linha para pegar sessionId
            with open(latest_file, 'r', encoding='utf-8') as f:
                first_line = f.readline().strip()
                if first_line:
                    data = json.loads(first_line)
                    return data.get('sessionId')
        except Exception:
            pass
        
        return None
    
    async def trigger_session_creation(self) -> Optional[str]:
        """
        Dispara cria√ß√£o de nova sess√£o via comando direto.
        
        M√©todo alternativo que executa comando Claude diretamente.
        """
        try:
            # Comando simples para criar sess√£o
            cmd = [
                'python', '-m', 'src', 
                '--no-header',
                'Ol√°! Nova sess√£o criada.'
            ]
            
            process = await asyncio.create_subprocess_exec(
                *cmd,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE,
                cwd='/.claude/api-claude-code-app/claude-code-sdk-python'
            )
            
            stdout, stderr = await process.communicate()
            
            if process.returncode == 0:
                # Aguarda sess√£o ser registrada
                await asyncio.sleep(2)
                return await self.get_latest_session_id()
            else:
                print(f"Erro ao criar sess√£o via SDK: {stderr.decode()}")
                return None
                
        except Exception as e:
            print(f"Erro no trigger de sess√£o: {e}")
            return None
    
    def get_project_name_for_session(self, session_id: str) -> Optional[str]:
        """Obt√©m nome do projeto para uma sess√£o espec√≠fica."""
        if not self.claude_projects.exists():
            return None
        
        # Busca em qual projeto est√° a sess√£o
        for project_dir in self.claude_projects.iterdir():
            if project_dir.is_dir():
                session_file = project_dir / f"{session_id}.jsonl"
                if session_file.exists():
                    return project_dir.name
        
        return None
    
    # ===========================================
    # OTIMIZA√á√ïES DE GERENCIAMENTO DE SESS√ÉO
    # ===========================================
    
    async def ensure_scheduler_started(self):
        """Garante que o scheduler esteja iniciado."""
        if not self._scheduler_started:
            self._scheduler_started = True
            await self._start_scheduler()
    
    async def _start_scheduler(self):
        """Inicia o task scheduler para limpeza peri√≥dica."""
        if self.scheduler_running:
            return
        
        self.scheduler_running = True
        self.cleanup_task = asyncio.create_task(self._cleanup_scheduler())
        self.logger.info("Task scheduler iniciado")
    
    async def _cleanup_scheduler(self):
        """Task scheduler DESABILITADO - Sess√µes nunca expiram."""
        # DESABILITADO - Sess√µes s√£o permanentes
        if self.CLEANUP_INTERVAL_MINUTES == 0:
            self.logger.info("üîí Limpeza autom√°tica DESABILITADA - Sess√µes s√£o permanentes")
            self.logger.info("‚úÖ Todas as sess√µes ser√£o mantidas indefinidamente")
            return
            
        # C√≥digo original mantido mas n√£o executado quando CLEANUP_INTERVAL_MINUTES = 0
        while self.scheduler_running and self.CLEANUP_INTERVAL_MINUTES > 0:
            await asyncio.sleep(self.CLEANUP_INTERVAL_MINUTES * 60)
            await self.cleanup_inactive_sessions()
    
    async def stop_scheduler(self):
        """Para o task scheduler."""
        self.scheduler_running = False
        if self.cleanup_task:
            self.cleanup_task.cancel()
            try:
                await self.cleanup_task
            except asyncio.CancelledError:
                pass
        self.logger.info("Task scheduler parado")
    
    def update_session_activity(self, session_id: str):
        """Atualiza timestamp de √∫ltima atividade da sess√£o."""
        with self._lock:
            self.active_sessions[session_id] = datetime.now()
            
            # Atualiza m√©tricas se existir
            if session_id in self.session_metrics:
                self.session_metrics[session_id].last_activity = datetime.now()
    
    def register_session(self, session_id: str) -> bool:
        """
        Registra nova sess√£o verificando limites.
        
        Returns:
            bool: True se registrada com sucesso, False se excedeu limite
        """
        with self._lock:
            # Verifica limite m√°ximo
            if len(self.active_sessions) >= self.MAX_SESSIONS:
                self.logger.warning(f"Limite de sess√µes atingido ({self.MAX_SESSIONS})")
                return False
            
            # Registra sess√£o
            self.active_sessions[session_id] = datetime.now()
            self.session_metrics[session_id] = SessionMetrics()
            
            self.logger.info(f"Sess√£o registrada: {session_id}")
            return True
    
    def unregister_session(self, session_id: str):
        """Remove sess√£o do registro."""
        with self._lock:
            self.active_sessions.pop(session_id, None)
            self.session_metrics.pop(session_id, None)
            self.orphaned_sessions.discard(session_id)
            
            self.logger.info(f"Sess√£o removida: {session_id}")
    
    async def cleanup_inactive_sessions(self) -> List[str]:
        """
        DESABILITADO - Sess√µes nunca expiram.
        
        Returns:
            List[str]: Sempre retorna lista vazia (sem remo√ß√µes)
        """
        # DESABILITADO - Sess√µes s√£o permanentes
        if self.SESSION_TIMEOUT_MINUTES == 0:
            self.logger.debug("üîí Timeout desabilitado - Sess√µes nunca expiram")
            return []
        
        # C√≥digo original mantido mas n√£o executado quando timeout = 0
        timeout_threshold = datetime.now() - timedelta(minutes=self.SESSION_TIMEOUT_MINUTES)
        inactive_sessions = []
        
        with self._lock:
            for session_id, last_activity in list(self.active_sessions.items()):
                if last_activity < timeout_threshold:
                    inactive_sessions.append(session_id)
                    self.unregister_session(session_id)
        
        if inactive_sessions:
            self.logger.info(f"Removidas {len(inactive_sessions)} sess√µes inativas: {inactive_sessions}")
        
        return inactive_sessions
    
    async def detect_orphaned_sessions(self) -> List[str]:
        """
        Detecta sess√µes √≥rf√£s (sem arquivos .jsonl correspondentes).
        
        Returns:
            List[str]: Lista de session_ids √≥rf√£os encontrados
        """
        orphans_found = []
        
        if not self.claude_projects.exists():
            return orphans_found
        
        # Coleta todos os session_ids dos arquivos .jsonl existentes
        existing_sessions = set()
        for project_dir in self.claude_projects.iterdir():
            if project_dir.is_dir():
                for jsonl_file in project_dir.glob("*.jsonl"):
                    try:
                        # Extrai session_id do nome do arquivo
                        session_id = jsonl_file.stem
                        existing_sessions.add(session_id)
                    except Exception:
                        continue
        
        # Detecta √≥rf√£s nas sess√µes registradas
        with self._lock:
            for session_id in list(self.active_sessions.keys()):
                if session_id not in existing_sessions:
                    self.orphaned_sessions.add(session_id)
                    orphans_found.append(session_id)
        
        if orphans_found:
            self.logger.warning(f"Detectadas {len(orphans_found)} sess√µes √≥rf√£s: {orphans_found}")
        
        return orphans_found
    
    async def _optimize_connection_pool(self):
        """Otimiza o pool de conex√µes removendo conex√µes antigas."""
        # Por enquanto, apenas limita o tamanho do pool
        # Em uma implementa√ß√£o real, aqui seria feita a gest√£o das conex√µes
        if len(self.connection_pool) > self.MAX_CONNECTION_POOL_SIZE:
            excess = len(self.connection_pool) - self.MAX_CONNECTION_POOL_SIZE
            self.connection_pool = self.connection_pool[-self.MAX_CONNECTION_POOL_SIZE:]
            self.logger.info(f"Pool de conex√µes otimizado, removidas {excess} conex√µes antigas")
    
    def update_session_metrics(self, session_id: str, **kwargs):
        """
        Atualiza m√©tricas de uma sess√£o.
        
        Args:
            session_id: ID da sess√£o
            **kwargs: message_count, total_tokens, total_cost, connection_errors
        """
        if session_id not in self.session_metrics:
            self.session_metrics[session_id] = SessionMetrics()
        
        metrics = self.session_metrics[session_id]
        
        # Atualiza atividade
        metrics.last_activity = datetime.now()
        
        # Atualiza m√©tricas espec√≠ficas
        for key, value in kwargs.items():
            if hasattr(metrics, key):
                setattr(metrics, key, value)
    
    def get_session_metrics(self, session_id: str) -> Optional[SessionMetrics]:
        """Retorna m√©tricas de uma sess√£o."""
        return self.session_metrics.get(session_id)
    
    def get_all_session_metrics(self) -> Dict[str, SessionMetrics]:
        """Retorna m√©tricas de todas as sess√µes."""
        return self.session_metrics.copy()
    
    def get_session_health_report(self) -> Dict[str, Any]:
        """
        Gera relat√≥rio de sa√∫de das sess√µes.
        
        Returns:
            Dict com estat√≠sticas gerais das sess√µes
        """
        now = datetime.now()
        active_count = len(self.active_sessions)
        orphaned_count = len(self.orphaned_sessions)
        
        # Calcula sess√µes por idade
        recent_sessions = 0  # √öltimas 5 min
        old_sessions = 0     # Mais de 1 hora
        
        for last_activity in self.active_sessions.values():
            age_minutes = (now - last_activity).total_seconds() / 60
            if age_minutes <= 5:
                recent_sessions += 1
            elif age_minutes >= 60:
                old_sessions += 1
        
        # M√©tricas totais
        total_messages = sum(m.message_count for m in self.session_metrics.values())
        total_tokens = sum(m.total_tokens for m in self.session_metrics.values())
        total_cost = sum(m.total_cost for m in self.session_metrics.values())
        total_errors = sum(m.connection_errors for m in self.session_metrics.values())
        
        return {
            "timestamp": now.isoformat(),
            "sessions": {
                "active": active_count,
                "orphaned": orphaned_count,
                "recent": recent_sessions,
                "old": old_sessions,
                "max_allowed": self.MAX_SESSIONS
            },
            "pool": {
                "size": len(self.connection_pool),
                "max_size": self.MAX_CONNECTION_POOL_SIZE
            },
            "totals": {
                "messages": total_messages,
                "tokens": total_tokens,
                "cost_usd": total_cost,
                "errors": total_errors
            },
            "config": {
                "timeout_minutes": self.SESSION_TIMEOUT_MINUTES,
                "cleanup_interval": self.CLEANUP_INTERVAL_MINUTES
            }
        }
    
    async def force_cleanup_all(self):
        """For√ßa limpeza completa de todas as sess√µes (para manuten√ß√£o)."""
        self.logger.info("Iniciando limpeza for√ßada de todas as sess√µes")

        with self._lock:
            session_count = len(self.active_sessions)
            self.active_sessions.clear()
            self.session_metrics.clear()
            self.orphaned_sessions.clear()
            self.connection_pool.clear()

        self.logger.info(f"Limpeza for√ßada conclu√≠da - {session_count} sess√µes removidas")

    def get_active_sessions(self) -> Dict[str, Any]:
        """Retorna todas as sess√µes ativas com suas informa√ß√µes."""
        sessions = {}
        with self._lock:
            for session_id, last_activity in self.active_sessions.items():
                sessions[session_id] = {
                    "session_id": session_id,
                    "project_id": self.get_project_name_for_session(session_id) or "neo4j-agent",
                    "created_at": self.session_metrics[session_id].created_at if session_id in self.session_metrics else last_activity,
                    "messages": []  # Simplificado por agora
                }
        return sessions

    def create_session(self, session_id: str, project_id: str = "neo4j-agent"):
        """Cria uma nova sess√£o no manager."""
        with self._lock:
            self.active_sessions[session_id] = datetime.now()
            self.session_metrics[session_id] = SessionMetrics()
            self.logger.info(f"Sess√£o criada: {session_id} para projeto {project_id}")

    def close_session(self, session_id: str):
        """Fecha uma sess√£o espec√≠fica."""
        self.unregister_session(session_id)